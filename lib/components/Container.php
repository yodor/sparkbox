<?php

class Container extends Component
{
    protected $items;

    protected $enabled = true;

    public function __construct()
    {
        parent::__construct();
        $this->items = array();
    }

    public function requiredScript()
    {
        return parent::requiredScript(); // TODO: Change the autogenerated stub
    }

    public function requiredStyle()
    {
        $arr =  parent::requiredStyle();
        $arr[] = SPARK_LOCAL."/css/Container.css";
        return $arr;
    }

    public function setEnabled(bool $mode)
    {
        $this->enabled = $mode;
    }

    public function isEnabled(): bool
    {
        return $this->enabled;
    }

    public function count() : int
    {
        return count($this->items);
    }

    public function clear()
    {
        $this->items = array();
    }

    public function insert(Component $cmp, int $idx)
    {
        array_splice($this->items, $idx, 0, $cmp );
    }

    public function prepend(Component $cmp)
    {
        $this->insert($cmp , 0);
    }

    /**
     * Add component to this Container
     * @param Component $cmp
     * @return int the index position for this component
     */
    public function append(Component $cmp)
    {
        $this->items[] = $cmp;

    }

    /**
     * Return the component at index $idx
     * @param int $idx The index of the component in this container
     * @return Component
     */
    public function get(int $idx) : Component
    {
        return $this->items[$idx];
    }

    public function getByClassName(string $name) : Component
    {
        $indexes = array_keys($this->items);
        foreach ($indexes as $idx=>$index) {
            $component = $this->get($index);
            if (strcmp($name, $component->getClassName())==0) {
                return $component;
            }
        }
        throw new Exception("Component with name '$name' not found in this container");
    }

    public function findBy($callback) : Component
    {
        $indexes = array_keys($this->items);
        foreach ($indexes as $idx=>$index) {
            $component = $this->get($index);
            if ($callback($component)) {
                return $component;
            }
        }
        throw new Exception("Component not found");
    }

    public function renderImpl()
    {
        $indexes = array_keys($this->items);
        foreach ($indexes as $idx=>$index) {
            $component = $this->get($index);
            $component->render();
        }
    }


}